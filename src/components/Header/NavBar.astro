---
import { CATEGORY_LINKS } from "@/utils/categories";

const { pathname } = Astro.url;
const dropdownId = "desktop-category-dropdown";
const buttonId = "desktop-category-button";

const isCategoriesActive = pathname.startsWith("/categories");
const navLinkBaseClass =
  "inline-flex items-center px-0 pb-1 pt-0 transition-colors duration-200";
const focusRingClass =
  "focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-primary-text";
---

<nav class="hidden md:block">
  <ul
    class="flex items-center gap-8 text-sm font-semibold uppercase tracking-[0.2em] leading-none"
  >
    <li>
      <a
        href="/"
        class:list={[
          navLinkBaseClass,
          pathname === "/"
            ? "text-primary-text border-b border-primary-text"
            : "text-secondary-text hover:text-primary-text",
        ]}
      >
        Home
      </a>
    </li>

    <li class="relative" data-category-root>
      <button
        id={buttonId}
        data-category-button
        type="button"
        data-active={isCategoriesActive}
        class:list={[
          navLinkBaseClass,
          focusRingClass,
          "appearance-none bg-transparent font-[inherit] text-[inherit] tracking-[inherit] leading-none",
          isCategoriesActive
            ? "!text-primary-text border-b border-primary-text"
            : "!text-secondary-text hover:!text-primary-text",
        ]}
        aria-expanded="false"
        aria-controls={dropdownId}
      >
        CATEGORY
      </button>

      <div
        id={dropdownId}
        data-category-dropdown
        class="absolute left-1/2 top-full mt-3 hidden w-48 -translate-x-1/2 translate-y-1 rounded-lg border border-border-ink/80 bg-card-bg py-3 opacity-0 shadow-sm transition-all duration-150 pointer-events-none"
        role="menu"
        aria-labelledby={buttonId}
        tabindex="-1"
        hidden
      >
        <ul
          class="flex flex-col gap-2 text-xs font-semibold uppercase tracking-[0.3em] text-secondary-text"
        >
          {CATEGORY_LINKS.map((category) => (
            <li>
              <a
                href={`/categories/${category.slug}`}
                class="block px-4 py-1.5 transition-colors duration-200 hover:text-primary-text focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-primary-text"
                role="menuitem"
                data-category-link
              >
                {category.label}
              </a>
            </li>
          ))}
        </ul>
      </div>
    </li>

    <li>
      <a
        href="/about"
        class:list={[
          navLinkBaseClass,
          pathname.startsWith("/about")
            ? "text-primary-text border-b border-primary-text"
            : "text-secondary-text hover:text-primary-text",
        ]}
      >
        About
      </a>
    </li>
  </ul>
</nav>

<script is:inline>
  (() => {
    /** @type {Window & Record<string, { teardown?: () => void } | undefined>} */
    const globalWindow = window;
    const STATE_KEY = "__lfjDesktopCategoryDropdown";

    // teardown any previous instance (during astro:after-swap etc.)
    globalWindow[STATE_KEY]?.teardown?.();

    /** @type {(() => void) | null} */
    let cleanupDropdown = null;

    const isHTMLElement = (v) => v instanceof HTMLElement;
    const isAnchorElement = (v) => v instanceof HTMLAnchorElement;
    const isNode = (v) => v instanceof Node;

    const initDropdown = () => {
      cleanupDropdown?.();
      cleanupDropdown = null;

      const root = document.querySelector("[data-category-root]");
      if (!isHTMLElement(root)) return;

      const dropdown = root.querySelector("[data-category-dropdown]");
      const toggleButton = root.querySelector("[data-category-button]");

      if (!isHTMLElement(dropdown) || !isHTMLElement(toggleButton)) return;

      const categoryLinks = Array.from(
        dropdown.querySelectorAll("[data-category-link]")
      ).filter(isAnchorElement);

      const isRouteActive = toggleButton.dataset.active === "true";
      let isOpen = false;

      // single valid implementation (the duplicate caused your syntax errors)
      const applyHighlight = (shouldHighlight) => {
        toggleButton.classList.toggle("!text-primary-text", shouldHighlight);
        toggleButton.classList.toggle("border-b", shouldHighlight);
        toggleButton.classList.toggle("border-primary-text", shouldHighlight);
        toggleButton.classList.toggle("!text-secondary-text", !shouldHighlight);
        toggleButton.classList.toggle("hover:!text-primary-text", !shouldHighlight);
      };

      const setOpen = (open, { restoreFocus = true } = {}) => {
        if (isOpen === open) return;

        isOpen = open;
        toggleButton.setAttribute("aria-expanded", String(open));
        dropdown.hidden = !open;
        dropdown.classList.toggle("hidden", !open);
        dropdown.classList.toggle("pointer-events-none", !open);
        dropdown.classList.toggle("pointer-events-auto", open);
        dropdown.classList.toggle("opacity-0", !open);
        dropdown.classList.toggle("opacity-100", open);
        dropdown.classList.toggle("translate-y-1", !open);
        dropdown.classList.toggle("translate-y-0", open);

        applyHighlight(open || isRouteActive);

        if (open) {
          requestAnimationFrame(() => {
            categoryLinks[0]?.focus?.();
          });
        } else if (restoreFocus) {
          toggleButton.focus();
        }
      };

      const openDropdown = () => setOpen(true);
      const closeDropdown = (opts = {}) => {
        const { restoreFocus = true } = opts;
        setOpen(false, { restoreFocus });
      };

      const handleToggleClick = (e) => {
        e.preventDefault();
        e.stopPropagation();
        isOpen ? closeDropdown() : openDropdown();
      };

      const handleButtonKeydown = (e) => {
        if (e.key === "Escape" && isOpen) {
          e.stopPropagation();
          closeDropdown();
        } else if ((e.key === "ArrowDown" || e.key === "Enter" || e.key === " ") && !isOpen) {
          e.preventDefault();
          openDropdown();
        }
      };

      const handleDropdownKeydown = (e) => {
        if (e.key === "Escape" && isOpen) {
          e.stopPropagation();
          closeDropdown();
        }
      };

      const handleDocumentClick = (e) => {
        if (!isOpen) return;
        const target = e.target;
        if (!isNode(target)) return;
        if (!root.contains(target)) {
          closeDropdown({ restoreFocus: false });
        }
      };

      const handleDocumentKeydown = (e) => {
        if (e.key === "Escape" && isOpen) closeDropdown();
      };

      const linkCleanups = categoryLinks.map((link) => {
        const onClick = () => closeDropdown({ restoreFocus: false });
        link.addEventListener("click", onClick);
        return () => link.removeEventListener("click", onClick);
      });

      toggleButton.addEventListener("click", handleToggleClick);
      toggleButton.addEventListener("keydown", handleButtonKeydown);
      dropdown.addEventListener("keydown", handleDropdownKeydown);
      document.addEventListener("click", handleDocumentClick);
      document.addEventListener("keydown", handleDocumentKeydown);

      applyHighlight(isRouteActive);
      dropdown.classList.add("hidden", "opacity-0", "pointer-events-none", "translate-y-1");

      cleanupDropdown = () => {
        linkCleanups.forEach((fn) => fn());
        toggleButton.removeEventListener("click", handleToggleClick);
        toggleButton.removeEventListener("keydown", handleButtonKeydown);
        dropdown.removeEventListener("keydown", handleDropdownKeydown);
        document.removeEventListener("click", handleDocumentClick);
        document.removeEventListener("keydown", handleDocumentKeydown);
      };
    };

    const setupDropdown = () => initDropdown();

    const handlePageLoad = () => setupDropdown();
    const handleAfterSwap = () => setupDropdown();

    const teardown = () => {
      cleanupDropdown?.();
      cleanupDropdown = null;
      document.removeEventListener("DOMContentLoaded", setupDropdown);
      document.removeEventListener("astro:page-load", handlePageLoad);
      document.removeEventListener("astro:after-swap", handleAfterSwap);
      document.removeEventListener("astro:unload", teardown);
      if (globalWindow[STATE_KEY] === api) globalWindow[STATE_KEY] = undefined;
    };

    if (document.readyState === "loading") {
      document.addEventListener("DOMContentLoaded", setupDropdown, { once: true });
    } else {
      setupDropdown();
    }

    document.addEventListener("astro:page-load", handlePageLoad);
    document.addEventListener("astro:after-swap", handleAfterSwap);
    document.addEventListener("astro:unload", teardown);

    /** @type {{ teardown: () => void }} */
    const api = { teardown };
    globalWindow[STATE_KEY] = api;
  })();
</script>
