---
import { CATEGORY_LINKS } from "@/utils/categories";
const { pathname } = Astro.url;
const isCategoriesActive = pathname.startsWith("/categories");

const linkBase =
  "nav-link ui-transition ui-focus inline-flex items-center px-0 pb-[3px] pt-0 leading-none font-[inherit] tracking-[inherit]";
---

<nav class="hidden md:block">
  <ul class="flex items-center gap-8 text-sm font-semibold uppercase tracking-[0.2em] leading-none">
    <!-- ... HOME link unchanged ... -->
    <li>
      <a
        href="/"
        class={`${linkBase} ${pathname === "/" ? "border-b border-border-ink/80" : "border-b border-transparent"}`}
      >
        INÍCIO
      </a>
    </li>


    <li class="relative" data-nav-dropdown>
      <a
        href="/categories"
        role="button"
        data-nav-trigger
        aria-haspopup="true"
        aria-expanded="false"
        class={`${linkBase} ${isCategoriesActive ? "border-b border-border-ink/80" : "border-b border-transparent"}`}
      >
        TÓPICOS
      </a>

      <div
        data-nav-panel
        class="invisible pointer-events-none absolute left-1/2 top-full z-30 mt-3 w-64 -translate-x-1/2 translate-y-1
               rounded border border-border-ink/80 bg-card-bg p-2 opacity-0 shadow-xl
               transition-[opacity,transform] duration-[var(--nav-speed)] ease-[var(--nav-ease)]
               before:absolute before:-top-3 before:left-0 before:right-0 before:h-3 before:content-['']
               data-[open='true']:visible data-[open='true']:pointer-events-auto data-[open='true']:opacity-100 data-[open='true']:translate-y-0">
        <ul class="flex flex-col">
          {CATEGORY_LINKS.map((c) => (
            <li>
              <a href={`/categories/${c.slug}`} class="block rounded px-3 py-2 text-xs uppercase tracking-[0.28em] text-secondary-text hover:text-primary-text ui-transition">
                {c.label}
              </a>
            </li>
          ))}
          <li class="my-1 h-px bg-border-ink/60"></li>
          <li>
<<<<<<< HEAD
            <a
              href="/categories"
              class="block rounded px-3 py-2 text-xs uppercase tracking-[0.28em] text-secondary-text hover:text-primary-text ui-transition"
            >
              VER TODAS
=======
            <a href="/categories" class="block rounded px-3 py-2 text-xs uppercase tracking-[0.28em] text-secondary-text hover:text-primary-text ui-transition">
              OFF-TOPIC
>>>>>>> main
            </a>
          </li>
        </ul>
      </div>
    </li>

    <li>
      <a
        href="/about"
        class={`${linkBase} ${pathname.startsWith("/about") ? "border-b border-border-ink/80" : "border-b border-transparent"}`}
      >
        SOBRE
      </a>
    </li>

  </ul>
</nav>

<script is:inline>
  (() => {
    if (typeof window === 'undefined') return;

    const ROOT = '[data-nav-dropdown]';
    const TRIGGER = '[data-nav-trigger]';
    const PANEL = '[data-nav-panel]';
    const OPEN_DELAY = 70;   // ms – small head-start so it doesn’t “snap”
    const CLOSE_DELAY = 120; // ms – linger to avoid jitter

    const cleanups = new Map();

    const setup = (root) => {
      const trigger = root.querySelector(TRIGGER);
      const panel = root.querySelector(PANEL);
      if (!(trigger && panel)) return () => {};

      let open = false;
      let tIn = 0, tOut = 0;

      const setOpen = (v) => {
        if (open === v) return;
        open = v;
        panel.dataset.open = v ? 'true' : 'false';
        trigger.setAttribute('aria-expanded', v ? 'true' : 'false');
      };

      const clearTimers = () => { clearTimeout(tIn); clearTimeout(tOut); tIn = tOut = 0; };

      const scheduleOpen  = () => { clearTimers(); tIn  = setTimeout(() => setOpen(true),  OPEN_DELAY); };
      const scheduleClose = () => { clearTimers(); tOut = setTimeout(() => setOpen(false), CLOSE_DELAY); };

      // Hover/focus orchestration
      const onEnter = () => scheduleOpen();
      const onLeave = () => scheduleClose();
      const onClick = (e) => { e.preventDefault(); setOpen(!open); };
      const onKey = (e) => { if (e.key === 'Escape' && open) { e.preventDefault(); setOpen(false); trigger.focus(); } };

      trigger.addEventListener('pointerenter', onEnter);
      trigger.addEventListener('pointerleave', onLeave);
      trigger.addEventListener('click', onClick);
      trigger.addEventListener('focus', onEnter);
      trigger.addEventListener('blur', onLeave);
      panel.addEventListener('pointerenter', onEnter);
      panel.addEventListener('pointerleave', onLeave);
      root.addEventListener('keydown', onKey);

      setOpen(false);

      return () => {
        clearTimers();
        trigger.removeEventListener('pointerenter', onEnter);
        trigger.removeEventListener('pointerleave', onLeave);
        trigger.removeEventListener('click', onClick);
        trigger.removeEventListener('focus', onEnter);
        trigger.removeEventListener('blur', onLeave);
        panel.removeEventListener('pointerenter', onEnter);
        panel.removeEventListener('pointerleave', onLeave);
        root.removeEventListener('keydown', onKey);
      };
    };

    const init = () => {
      cleanups.forEach((fn) => fn());
      cleanups.clear();
      document.querySelectorAll(ROOT).forEach((root) => cleanups.set(root, setup(root)));
    };

    init();
    document.addEventListener('astro:after-swap', init);
    document.addEventListener('astro:unload', () => {
      cleanups.forEach((fn) => fn());
      cleanups.clear();
      document.removeEventListener('astro:after-swap', init);
    });
  })();
  
</script>
