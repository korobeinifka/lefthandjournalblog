---
import PageLayout from "@/layouts/PageLayout.astro";
import { getCollection, type CollectionEntry } from "astro:content";
import PostListItem from "@/components/PostListItem.astro";
import { slugify } from "@/utils/slug";

/** Gera páginas estáticas para:
 *  - categorias declaradas em `src/content/categories`
 *  - categorias que apareçam apenas em posts
 */
export async function getStaticPaths() {
  const cats  = await getCollection("categories").catch(() => []) as any[];
  const posts = await getCollection("blogs");

  // mapa slug -> label preferencial
  const bySlug = new Map<string, string>();

  // categorias de /content/categories
  for (const c of cats) {
    const { label, slug } = (c?.data ?? {}) as { label?: string; slug?: string };
    if (label && slug) bySlug.set(slug, label);
  }

  // categorias que existem só em posts
  for (const p of posts) {
    const raw = (p.data.category ?? "").toString().trim();
    if (!raw) continue;
    const s = slugify(raw);
    if (!bySlug.has(s)) bySlug.set(s, raw);
  }

  // monta paths com os itens já ordenados por data
  const paths = Array.from(bySlug.entries()).map(([slug, label]) => {
    const items = posts
      .filter((p) => slugify(p.data.category ?? "") === slug)
      .sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf());
    return { params: { category: slug }, props: { label, items } };
  });

  return paths;
}

// ----- Fallback de runtime (útil em dev) -----
type P = { label?: string; items?: CollectionEntry<"blogs">[] };
let { label, items } = Astro.props as P;

if (!label || !items) {
  const incoming = slugify((Astro.params?.category ?? "").toString());
  const all = await getCollection("blogs");
  const first = all.find((p) => slugify(p.data.category ?? "") === incoming);
  label = (first?.data.category as string) ?? incoming;

  items = all
    .filter((p) => slugify(p.data.category ?? "") === incoming)
    .sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf());
}
---

<PageLayout>
  <section class="flex flex-col space-y-3 md:space-y-4">
    <!-- rótulo alinhado exatamente à régua dos cards -->
    <div class="mx-auto w-full md:max-w-[46rem] lg:max-w-[50rem] xl:max-w-[52rem] px-3 md:px-4">
      <p class="text-[12px] font-semibold uppercase tracking-[0.16em] text-muted-text">
        {(label ?? "").toUpperCase()}
      </p>
    </div>

    {items && items.length ? (
      <ul class="space-y-3 md:space-y-4">
        {items.map((post) => (
          <li class="py-0 first:pt-0">
            <PostListItem post={post} />
          </li>
        ))}
      </ul>
    ) : (
      <div class="mx-auto w-full md:max-w-[46rem] lg:max-w-[50rem] xl:max-w-[52rem]">
        <p class="text-secondary-text">No posts in this category yet.</p>
      </div>
    )}
  </section>
</PageLayout>
