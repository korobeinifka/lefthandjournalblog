//@ts-nocheck
  // DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
  export function gql(strings: TemplateStringsArray, ...args: string[]): string {
    let str = ''
    strings.forEach((string, i) => {
      str += string + (args[i] || '')
    })
    return str
  }
  export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
  /** References another document, used as a foreign key */
  Reference: { input: any; output: any; }
  JSON: { input: any; output: any; }
};

export type SystemInfo = {
  __typename?: 'SystemInfo';
  filename: Scalars['String']['output'];
  title?: Maybe<Scalars['String']['output']>;
  basename: Scalars['String']['output'];
  hasReferences?: Maybe<Scalars['Boolean']['output']>;
  breadcrumbs: Array<Scalars['String']['output']>;
  path: Scalars['String']['output'];
  relativePath: Scalars['String']['output'];
  extension: Scalars['String']['output'];
  template: Scalars['String']['output'];
  collection: Collection;
};


export type SystemInfoBreadcrumbsArgs = {
  excludeExtension?: InputMaybe<Scalars['Boolean']['input']>;
};

export type Folder = {
  __typename?: 'Folder';
  name: Scalars['String']['output'];
  path: Scalars['String']['output'];
};

export type PageInfo = {
  __typename?: 'PageInfo';
  hasPreviousPage: Scalars['Boolean']['output'];
  hasNextPage: Scalars['Boolean']['output'];
  startCursor: Scalars['String']['output'];
  endCursor: Scalars['String']['output'];
};

export type Node = {
  id: Scalars['ID']['output'];
};

export type Document = {
  id: Scalars['ID']['output'];
  _sys?: Maybe<SystemInfo>;
  _values: Scalars['JSON']['output'];
};

/** A relay-compliant pagination connection */
export type Connection = {
  totalCount: Scalars['Float']['output'];
  pageInfo: PageInfo;
};

export type Query = {
  __typename?: 'Query';
  getOptimizedQuery?: Maybe<Scalars['String']['output']>;
  collection: Collection;
  collections: Array<Collection>;
  node: Node;
  document: DocumentNode;
  blogs: Blogs;
  blogsConnection: BlogsConnection;
  categories: Categories;
  categoriesConnection: CategoriesConnection;
};


export type QueryGetOptimizedQueryArgs = {
  queryString: Scalars['String']['input'];
};


export type QueryCollectionArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
};


export type QueryNodeArgs = {
  id?: InputMaybe<Scalars['String']['input']>;
};


export type QueryDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryBlogsArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryBlogsConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<BlogsFilter>;
};


export type QueryCategoriesArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryCategoriesConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<CategoriesFilter>;
};

export type DocumentFilter = {
  blogs?: InputMaybe<BlogsFilter>;
  categories?: InputMaybe<CategoriesFilter>;
};

export type DocumentConnectionEdges = {
  __typename?: 'DocumentConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<DocumentNode>;
};

export type DocumentConnection = Connection & {
  __typename?: 'DocumentConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<DocumentConnectionEdges>>>;
};

export type Collection = {
  __typename?: 'Collection';
  name: Scalars['String']['output'];
  slug: Scalars['String']['output'];
  label?: Maybe<Scalars['String']['output']>;
  path: Scalars['String']['output'];
  format?: Maybe<Scalars['String']['output']>;
  matches?: Maybe<Scalars['String']['output']>;
  templates?: Maybe<Array<Maybe<Scalars['JSON']['output']>>>;
  fields?: Maybe<Array<Maybe<Scalars['JSON']['output']>>>;
  documents: DocumentConnection;
};


export type CollectionDocumentsArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<DocumentFilter>;
  folder?: InputMaybe<Scalars['String']['input']>;
};

export type DocumentNode = Blogs | Categories | Folder;

export type Blogs = Node & Document & {
  __typename?: 'Blogs';
  title: Scalars['String']['output'];
  description?: Maybe<Scalars['String']['output']>;
  pubDate: Scalars['String']['output'];
  category?: Maybe<Scalars['String']['output']>;
  author: Scalars['String']['output'];
  heroImage?: Maybe<Scalars['String']['output']>;
  heroImageAlt?: Maybe<Scalars['String']['output']>;
  body?: Maybe<Scalars['JSON']['output']>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type StringFilter = {
  startsWith?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type DatetimeFilter = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type ImageFilter = {
  startsWith?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type RichTextFilter = {
  startsWith?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
};

export type BlogsFilter = {
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  pubDate?: InputMaybe<DatetimeFilter>;
  category?: InputMaybe<StringFilter>;
  author?: InputMaybe<StringFilter>;
  heroImage?: InputMaybe<ImageFilter>;
  heroImageAlt?: InputMaybe<StringFilter>;
  body?: InputMaybe<RichTextFilter>;
};

export type BlogsConnectionEdges = {
  __typename?: 'BlogsConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Blogs>;
};

export type BlogsConnection = Connection & {
  __typename?: 'BlogsConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<BlogsConnectionEdges>>>;
};

export type Categories = Node & Document & {
  __typename?: 'Categories';
  label: Scalars['String']['output'];
  slug: Scalars['String']['output'];
  heroImage?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type CategoriesFilter = {
  label?: InputMaybe<StringFilter>;
  slug?: InputMaybe<StringFilter>;
  heroImage?: InputMaybe<ImageFilter>;
};

export type CategoriesConnectionEdges = {
  __typename?: 'CategoriesConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Categories>;
};

export type CategoriesConnection = Connection & {
  __typename?: 'CategoriesConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<CategoriesConnectionEdges>>>;
};

export type Mutation = {
  __typename?: 'Mutation';
  addPendingDocument: DocumentNode;
  updateDocument: DocumentNode;
  deleteDocument: DocumentNode;
  createDocument: DocumentNode;
  createFolder: DocumentNode;
  updateBlogs: Blogs;
  createBlogs: Blogs;
  updateCategories: Categories;
  createCategories: Categories;
};


export type MutationAddPendingDocumentArgs = {
  collection: Scalars['String']['input'];
  relativePath: Scalars['String']['input'];
  template?: InputMaybe<Scalars['String']['input']>;
};


export type MutationUpdateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
  params: DocumentUpdateMutation;
};


export type MutationDeleteDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
};


export type MutationCreateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
  params: DocumentMutation;
};


export type MutationCreateFolderArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
};


export type MutationUpdateBlogsArgs = {
  relativePath: Scalars['String']['input'];
  params: BlogsMutation;
};


export type MutationCreateBlogsArgs = {
  relativePath: Scalars['String']['input'];
  params: BlogsMutation;
};


export type MutationUpdateCategoriesArgs = {
  relativePath: Scalars['String']['input'];
  params: CategoriesMutation;
};


export type MutationCreateCategoriesArgs = {
  relativePath: Scalars['String']['input'];
  params: CategoriesMutation;
};

export type DocumentUpdateMutation = {
  blogs?: InputMaybe<BlogsMutation>;
  categories?: InputMaybe<CategoriesMutation>;
  relativePath?: InputMaybe<Scalars['String']['input']>;
};

export type DocumentMutation = {
  blogs?: InputMaybe<BlogsMutation>;
  categories?: InputMaybe<CategoriesMutation>;
};

export type BlogsMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  pubDate?: InputMaybe<Scalars['String']['input']>;
  category?: InputMaybe<Scalars['String']['input']>;
  author?: InputMaybe<Scalars['String']['input']>;
  heroImage?: InputMaybe<Scalars['String']['input']>;
  heroImageAlt?: InputMaybe<Scalars['String']['input']>;
  body?: InputMaybe<Scalars['JSON']['input']>;
};

export type CategoriesMutation = {
  label?: InputMaybe<Scalars['String']['input']>;
  slug?: InputMaybe<Scalars['String']['input']>;
  heroImage?: InputMaybe<Scalars['String']['input']>;
};

export type BlogsPartsFragment = { __typename: 'Blogs', title: string, description?: string | null, pubDate: string, category?: string | null, author: string, heroImage?: string | null, heroImageAlt?: string | null, body?: any | null };

export type CategoriesPartsFragment = { __typename: 'Categories', label: string, slug: string, heroImage?: string | null };

export type BlogsQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type BlogsQuery = { __typename?: 'Query', blogs: { __typename: 'Blogs', id: string, title: string, description?: string | null, pubDate: string, category?: string | null, author: string, heroImage?: string | null, heroImageAlt?: string | null, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } };

export type BlogsConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<BlogsFilter>;
}>;


export type BlogsConnectionQuery = { __typename?: 'Query', blogsConnection: { __typename?: 'BlogsConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'BlogsConnectionEdges', cursor: string, node?: { __typename: 'Blogs', id: string, title: string, description?: string | null, pubDate: string, category?: string | null, author: string, heroImage?: string | null, heroImageAlt?: string | null, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } | null } | null> | null } };

export type CategoriesQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type CategoriesQuery = { __typename?: 'Query', categories: { __typename: 'Categories', id: string, label: string, slug: string, heroImage?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } };

export type CategoriesConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<CategoriesFilter>;
}>;


export type CategoriesConnectionQuery = { __typename?: 'Query', categoriesConnection: { __typename?: 'CategoriesConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'CategoriesConnectionEdges', cursor: string, node?: { __typename: 'Categories', id: string, label: string, slug: string, heroImage?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } | null } | null> | null } };

export const BlogsPartsFragmentDoc = gql`
    fragment BlogsParts on Blogs {
  __typename
  title
  description
  pubDate
  category
  author
  heroImage
  heroImageAlt
  body
}
    `;
export const CategoriesPartsFragmentDoc = gql`
    fragment CategoriesParts on Categories {
  __typename
  label
  slug
  heroImage
}
    `;
export const BlogsDocument = gql`
    query blogs($relativePath: String!) {
  blogs(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...BlogsParts
  }
}
    ${BlogsPartsFragmentDoc}`;
export const BlogsConnectionDocument = gql`
    query blogsConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: BlogsFilter) {
  blogsConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...BlogsParts
      }
    }
  }
}
    ${BlogsPartsFragmentDoc}`;
export const CategoriesDocument = gql`
    query categories($relativePath: String!) {
  categories(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...CategoriesParts
  }
}
    ${CategoriesPartsFragmentDoc}`;
export const CategoriesConnectionDocument = gql`
    query categoriesConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: CategoriesFilter) {
  categoriesConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...CategoriesParts
      }
    }
  }
}
    ${CategoriesPartsFragmentDoc}`;
export type Requester<C= {}> = <R, V>(doc: DocumentNode, vars?: V, options?: C) => Promise<R>
  export function getSdk<C>(requester: Requester<C>) {
    return {
      blogs(variables: BlogsQueryVariables, options?: C): Promise<{data: BlogsQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: BlogsQueryVariables, query: string}> {
        return requester<{data: BlogsQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: BlogsQueryVariables, query: string}, BlogsQueryVariables>(BlogsDocument, variables, options);
      },
    blogsConnection(variables?: BlogsConnectionQueryVariables, options?: C): Promise<{data: BlogsConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: BlogsConnectionQueryVariables, query: string}> {
        return requester<{data: BlogsConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: BlogsConnectionQueryVariables, query: string}, BlogsConnectionQueryVariables>(BlogsConnectionDocument, variables, options);
      },
    categories(variables: CategoriesQueryVariables, options?: C): Promise<{data: CategoriesQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: CategoriesQueryVariables, query: string}> {
        return requester<{data: CategoriesQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: CategoriesQueryVariables, query: string}, CategoriesQueryVariables>(CategoriesDocument, variables, options);
      },
    categoriesConnection(variables?: CategoriesConnectionQueryVariables, options?: C): Promise<{data: CategoriesConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: CategoriesConnectionQueryVariables, query: string}> {
        return requester<{data: CategoriesConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: CategoriesConnectionQueryVariables, query: string}, CategoriesConnectionQueryVariables>(CategoriesConnectionDocument, variables, options);
      }
    };
  }
  export type Sdk = ReturnType<typeof getSdk>;

// TinaSDK generated code
import { createClient, TinaClient } from "tinacms/dist/client";

const generateRequester = (
  client: TinaClient,
) => {
  const requester: (
    doc: any,
    vars?: any,
    options?: {
      branch?: string,
      /**
       * Aside from `method` and `body`, all fetch options are passed
       * through to underlying fetch request
       */
      fetchOptions?: Omit<Parameters<typeof fetch>[1], 'body' | 'method'>,
    },
    client
  ) => Promise<any> = async (doc, vars, options) => {
    let url = client.apiUrl
    if (options?.branch) {
      const index = client.apiUrl.lastIndexOf('/')
      url = client.apiUrl.substring(0, index + 1) + options.branch
    }
    const data = await client.request({
      query: doc,
      variables: vars,
      url,
    }, options)

    return { data: data?.data, errors: data?.errors, query: doc, variables: vars || {} }
  }

  return requester
}

/**
 * @experimental this class can be used but may change in the future
 **/
export const ExperimentalGetTinaClient = () =>
  getSdk(
    generateRequester(
      createClient({
        url: "http://localhost:4001/graphql",
        queries,
      })
    )
  )

export const queries = (
  client: TinaClient,
) => {
  const requester = generateRequester(client)
  return getSdk(requester)
}

  